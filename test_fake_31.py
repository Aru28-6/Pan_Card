# -*- coding: utf-8 -*-
"""TEST_FAKE_31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eDhjWEM5IboJwpeQpCwK8xE5EJRGAmpC
"""

# Mount Google Drive (if using Google Colab)
from google.colab import drive
drive.mount('/content/drive')

# Imports
import cv2
import os
import numpy as np
import matplotlib.pyplot as plt
from skimage.metrics import structural_similarity as ssim

# Preprocess image (resize & grayscale)
def preprocess_image(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if image is None:
        print(f"❌ Error: Unable to load image '{image_path}'")
        return None
    image = cv2.resize(image, (400, 200))
    return image

# SSIM comparison
def compare_images(image1, image2):
    score, diff = ssim(image1, image2, full=True)
    return score, (diff * 255).astype("uint8")

# Decide result
def determine_result(score):
    return ("Valid PAN Card", "✅ Minimal structural differences.") if score >= 0.85 else ("Fake PAN Card", "❌ Major structural differences detected.")

# Compare a single image
def check_tampered_image(test_image_path, reference_image):
    test_image = preprocess_image(test_image_path)
    if test_image is None:
        return None, "Error loading image", None
    score, _ = compare_images(reference_image, test_image)
    result, reason = determine_result(score)
    return score, result, reason

# Process folder & plot SSIM line graph
def process_pan_folder(folder_path, reference_image_path):
    if not os.path.exists(folder_path):
        print(f"❌ Folder '{folder_path}' not found!")
        return

    reference_image = preprocess_image(reference_image_path)
    if reference_image is None:
        print("❌ Could not load reference PAN card image.")
        return

    # Score for the original image (compared with itself)
    ori_score, _ = compare_images(reference_image, reference_image)

    # Collect filenames & scores
    ssim_scores = [ori_score]
    image_names = ["ori.jpg"]
    colors = ["blue"]

    print("\n🔍 Processing test images...\n")

    for filename in os.listdir(folder_path):
        if filename.lower().endswith((".jpg", ".jpeg", ".png")):
            file_path = os.path.join(folder_path, filename)
            score, result, reason = check_tampered_image(file_path, reference_image)
            if score is not None:
                print(f"\n🖼 Image: {filename}")
                print(f"📊 SSIM Score: {score:.4f}")
                print(f"🔍 Result: {result}")
                print(f"📌 Reason: {reason}")
                print("--------------------------------------------------")
                ssim_scores.append(score)
                image_names.append(filename)
                # Color by classification
                colors.append("green" if result == "Valid PAN Card" else "red")

    # Plot Line Graph
    plt.figure(figsize=(10, 8))
    plt.hlines(y=image_names, xmin=0, xmax=ssim_scores, colors=colors, linewidth=3)
    plt.plot(ssim_scores, image_names, "o", color="black")  # Add points
    plt.axvline(x=0.85, color='gray', linestyle='--', label='Threshold (0.85)')
    plt.xlabel("SSIM Score")
    plt.ylabel("Image Filename")
    plt.title("PAN Card Tampering Detection - SSIM Line Graph")
    plt.xlim(0, 1.05)
    plt.grid(axis='x')
    plt.legend()
    plt.tight_layout()
    plt.show()

# ✅ Paths to your images
test_folder = "/content/drive/MyDrive/images-high-res"       # Folder with test images
reference_image_path = "/content/drive/MyDrive/ori.jpg"      # Original image

# 🚀 Run the analysis and plot
process_pan_folder(test_folder, reference_image_path)